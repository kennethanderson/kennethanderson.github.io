Dependencies:
- markdown (text -> html)
- mustache (templating engine)
- awk/sed (to wrap the yaml-embedded markdown)

Although this is a simple site, making it mobile friendly 
requires fine-tuned html output.  
Markdown allows me to write sections in text and 
convert it to html snippets.
A templating engine allows me fine-grained control over
combining the html snippets.

Markdown and Mustache are simple and well-used.  But there are some pecularities...
- Markdown should only be used for small sections.
- Mustache does _not_ support multidoc YAML (the manpage is wrong).
- Mustache's partials _must_ use the .mustache suffix.

--------------

Considered options:

Asciidoc (viable)
+ Write entire page and convert to html (or other output types).
+ Single standard, and is extensible (no 'flavours').
+ Syntax highlighting in vim.
+ Converts bullet/numbered lists, tables, (R)(TM)(C), arrows by default.
+ Recommended by Linus Torvalds and Eric Raymond.
+ used to in git project.
- asciidoc is overkill: complicated to accomidate different doc types, and big installation package(s).
- asciidoc implementated in Python.
  asciidoctor implementated in Ruby (~100x faster).
  But asciidoctor not entirely compatible:
  - a new output type (encapsulated html or some such)
  - doesn't support .conf files.
- https://powerman.name/doc/asciidoc

reStructuredText (viable)
- https://lwn.net/Articles/692704/
  The linux kernel documentation went through some iterations/tests that
  started with asciidoc/Docbook and 
  settled on reStructuredTex (using Sphinx).
- asciidoc and reStructuredText are about equivalent for our purposes.
- rst doesn't really do tables by default.

Markdown
+ simple and readable
+ block html elements (p,div,table,pre) separated by blank lines.
+ span elements: links, emphais, code, images
+ converts & < ' " (R) (TM) (C) 1/2 1/4 3/4 ...
+ backslash escape \* \_ \. (bold, italics, # list)
- markdown has multiple 'flavours' to deal with some deficiencies.  
- https://daringfireball.net/projects/markdown/syntax#list
- http://geog.uoregon.edu/bartlein/courses/geog607/Rmd/MDquick-refcard.pdf

line-oriented data + awk template (discarded)
- handling multiline data in awk was a royal pain.
+ awk is ubiquitous on linux systems.

yaml/json data + mustache template
- yaml format is simpler to read/edit (line-oriented).
  json is difficult to read, and quotes/special characters require hand-editing.

